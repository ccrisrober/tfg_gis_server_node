// Generated by CoffeeScript 1.8.0
(function() {
  var KeyObject, Map, ObjectUser, keys, maps, net, positions, sockets, svr, svraddr, svrport, sys;

  sys = require("sys");

  net = require("net");

  ObjectUser = require("./ObjectUser.js");

  Map = require("./Map.js");

  KeyObject = require("./KeyObject.js");

  sockets = [];

  positions = [];

  maps = [];

  keys = {};

  keys["Red"] = new KeyObject(1, 5 * 64, 5 * 64, "Red");

  keys["Blue"] = new KeyObject(2, 6 * 64, 5 * 64, "Blue");

  keys["Yellow"] = new KeyObject(3, 7 * 64, 5 * 64, "Yellow");

  keys["Green"] = new KeyObject(4, 8 * 64, 5 * 64, "Green");

  maps.push(new Map(1, "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1," + "1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 5, 7, 5, 5, 5, 5, 1, 1, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 1," + "1, 1, 0, 0, 4, 6, 5, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 5, 5, 5, 0, 8, 8, 8, 0, 0, 1," + "1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 4, 0, 0, 0, 1, 1, 0, 5, 5, 5, 0, 0, 0, 8, 8, 8, 4, 0, 1," + "1, 0, 1, 0, 0, 0, 0, 4, 0, 0, 1, 1, 1, 1, 4, 0, 0, 0, 1, 0, 5, 0, 4, 4, 0, 0, 8, 8, 8, 1, 4, 1," + "4, 0, 1, 0, 0, 0, 0, 4, 4, 0, 1, 1, 1, 1, 1, 1, 4, 0, 1, 0, 5, 0, 4, 4, 4, 0, 8, 8, 8, 1, 1, 1," + "1, 0, 1, 0, 0, 4, 4, 4, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 5, 4, 4, 4, 0, 0, 0, 0, 1, 1, 1, 1," + "1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1," + "1, 1, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5," + "1, 1, 0, 0, 4, 0, 5, 5, 5, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 5, 5, 5, 0, 1, 1, 1, 0, 0, 1," + "1, 1, 1, 0, 5, 5, 5, 0, 0, 0, 1, 1, 1, 4, 0, 0, 0, 1, 1, 0, 5, 5, 5, 0, 0, 0, 1, 1, 1, 4, 0, 1," + "1, 0, 1, 0, 5, 0, 4, 4, 0, 0, 1, 1, 1, 1, 4, 0, 0, 0, 1, 0, 5, 0, 4, 4, 0, 0, 1, 1, 1, 1, 4, 1," + "4, 0, 1, 0, 5, 0, 4, 4, 4, 0, 1, 1, 1, 1, 1, 1, 4, 0, 1, 0, 5, 0, 4, 4, 4, 0, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", 32, 25, [keys["Red"], keys["Blue"], keys["Green"], keys["Yellow"]]));

  svr = net.createServer(function(sock) {
    var newConnectionWarningUser, randomValue, sendDiePlayerAndWinnerToShow, sendFightToAnotherClient, sendMap, sendPosition;
    sendMap = function(num_map) {
      var ret;
      positions[sock.remotePort].setPos(5 * 64);
      positions[sock.remotePort].setPos(5 * 64);
      ret = JSON.stringify({
        Action: "sendMap",
        Map: maps[num_map],
        X: positions[sock.remotePort].getPosX(),
        Y: positions[sock.remotePort].getPosY(),
        Id: sock.remotePort,
        Users: positions
      });
      sock.write(ret);
    };
    sendPosition = function(client_id) {
      sock.write(JSON.stringify(positions[client_id]));
    };
    newConnectionWarningUser = function(client_id) {
      var i, len, ret;
      sys.puts("Send new connection to users");
      len = sockets.lenght;
      ret = positions[client_id];
      ret["Action"] = "new";
      i = 0;
      while (i < len) {
        if (sockets[i] !== sockets) {
          if (sockets[i]) {
            sockets[i].write(JSON.stringify(ret));
          }
        }
        i++;
      }
    };
    sendFightToAnotherClient = function(emisor_id, receiver_id) {
      var i, len, ret, retOthers;
      retOthers = JSON.stringify({
        Action: "hide",
        Ids: [emisor_id, receiver_id]
      });
      positions[emisor_id].setRollDie(randomValue(1, 6));
      i = 0;
      len = sockets.length;
      while (i < len) {
        if (sockets[i].remotePort === receiver_id) {
          ret = JSON.stringify({
            Action: "fight",
            Id_enemy: emisor_id
          });
          positions[receiver_id].setRollDie(randomValue(1, 6));
          sockets[i].write(ret);
        } else {
          if (sockets[i].removePort !== emisor_id) {
            sockets[i].write(retOthers);
          }
        }
        i++;
      }
    };
    sendDiePlayerAndWinnerToShow = function(emisor_id, receiver_id) {
      var ret, valueC, valueE, winner;
      winner = -1;
      valueC = -1;
      valueE = -1;
      if (!positions[emisor_id]) {
        winner = receiver_id;
        valueC = positions[receiver_id].getRollDie();
      } else if (!positions[receiver_id]) {
        winner = emisor_id;
        valueE = positions[emisor_id].getRollDie();
      } else if (positions[emisor_id].getRollDie() > positions[receiver_id].getRollDie()) {
        winner = emisor_id;
        valueE = positions[emisor_id].getRollDie();
        valueC = positions[receiver_id].getRollDie();
      } else if (positions[receiver_id].getRollDie() > positions[emisor_id].getRollDie()) {
        winner = receiver_id;
        valueE = positions[emisor_id].getRollDie();
        valueC = positions[receiver_id].getRollDie();
      }
      ret = JSON.stringify({
        Action: "finishBattle",
        ValueClient: valueC,
        ValueEnemy: valueE,
        Winner: winner
      });
      sock.write(ret);
    };
    randomValue = function(min, max) {
      var rand;
      rand = min + Math.floor(Math.random() * max);
      return rand;
    };
    sock.on("data", function(data) {
      var Exception, d, i, idx, len, ret;
      sys.puts("RECEIVE: " + data);
      if (data !== "\n") {
        data = data.toString("utf-8");
        d = data;
        try {
          d = JSON.parse(data);
        } catch (_error) {
          Exception = _error;
          sys.puts("Parse error");
        }
        switch (d.Action) {
          case "move":
            positions[sock.remotePort].setPosition(d.PosX, d.Pos.Y);
            break;
          case "position":
            sendPosition(sock.remotePort);
            break;
          case "fight":
            sendFightToAnotherClient(sock.remotePort, d.Id_enemy);
            return;
          case "finishBattle":
            sendDiePlayerAndWinnerToShow(sock.remotePort, d.Id_enemy);
            return;
          case "exit":
            ret = JSON.stringify({
              Action: "exit",
              Id: sock.remotePort
            });
            idx = sockets.indexOf(sock);
            if (idx !== -1) {
              delete positions[sock.remotePort];
              sockets.splice(idx, 1);
            }
            data = ret;
        }
        i = 0;
        len = sockets.length;
        while (i < len) {
          if (sockets[i] !== sock) {
            if (sockets[i]) {
              sockets[i].write(data);
            }
          }
          i++;
        }
      }
    });
    sock.on("end", function() {});
    sock.on("error", function(exc) {
      sys.puts("Error: " + exc);
    });
  });

  svraddr = "127.0.0.1";

  svrport = 8081;

  svr.listen(svrport, svraddr);

  sys.puts("Server created at " + svraddr + ":" + svrport + "\n");

}).call(this);
