// Generated by CoffeeScript 1.8.0
(function() {
  var KeyObject, Map, ObjectUser, battles, dir, fs, keys, maps, net, positions, sockets, svr, svraddr, svrport, sys;

  sys = require("sys");

  net = require("net");

  fs = require("fs");

  dir = "./maps/";


  /**
  To read all files in "maps" directory
  
  var fs = require('fs');
  var dir='./tmpl/';
  var data={};
  
  fs.readdir(dir,function(err,files){
  if (err) throw err;
  var c=0;
  files.forEach(function(file){
  c++;
  fs.readFile(dir+file,'utf-8',function(err,html){
  if (err) throw err;
  data[file]=html;
  if (0===--c) {
  console.log(data);  //socket.emit('init', {data: data});
  }
  });
  });
  });
   */

  sockets = [];

  positions = {};

  maps = [];

  battles = {};

  keys = {};

  ObjectUser = require("./ObjectUser.js");

  Map = require("./Map.js");

  KeyObject = require("./KeyObject.js");

  keys["Red"] = new KeyObject(1, 5 * 64, 5 * 64, "Red");

  keys["Blue"] = new KeyObject(2, 6 * 64, 5 * 64, "Blue");

  keys["Yellow"] = new KeyObject(3, 7 * 64, 5 * 64, "Yellow");

  keys["Green"] = new KeyObject(4, 8 * 64, 5 * 64, "Green");

  console.log(keys);

  maps.push(new Map(1, "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1," + "1, 1, 0, 0, 0, 0, 0, 0, 0, 5, 5, 7, 5, 5, 5, 5, 1, 1, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 1," + "1, 1, 0, 0, 4, 6, 5, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 5, 5, 5, 0, 8, 8, 8, 0, 0, 1," + "1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 4, 0, 0, 0, 1, 1, 0, 5, 5, 5, 0, 0, 0, 8, 8, 8, 4, 0, 1," + "1, 0, 1, 0, 0, 0, 0, 4, 0, 0, 1, 1, 1, 1, 4, 0, 0, 0, 1, 0, 5, 0, 4, 4, 0, 0, 8, 8, 8, 1, 4, 1," + "4, 0, 1, 0, 0, 0, 0, 4, 4, 0, 1, 1, 1, 1, 1, 1, 4, 0, 1, 0, 5, 0, 4, 4, 4, 0, 8, 8, 8, 1, 1, 1," + "1, 0, 1, 0, 0, 4, 4, 4, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 5, 4, 4, 4, 0, 0, 0, 0, 1, 1, 1, 1," + "1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 0, 0, 0, 1," + "1, 1, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5," + "1, 1, 0, 0, 4, 0, 5, 5, 5, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 5, 5, 5, 0, 1, 1, 1, 0, 0, 1," + "1, 1, 1, 0, 5, 5, 5, 0, 0, 0, 1, 1, 1, 4, 0, 0, 0, 1, 1, 0, 5, 5, 5, 0, 0, 0, 1, 1, 1, 4, 0, 1," + "1, 0, 1, 0, 5, 0, 4, 4, 0, 0, 1, 1, 1, 1, 4, 0, 0, 0, 1, 0, 5, 0, 4, 4, 0, 0, 1, 1, 1, 1, 4, 1," + "4, 0, 1, 0, 5, 0, 4, 4, 4, 0, 1, 1, 1, 1, 1, 1, 4, 0, 1, 0, 5, 0, 4, 4, 4, 0, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1," + "1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,", 32, 25, [keys["Red"], keys["Blue"], keys["Green"], keys["Yellow"]]));

  svr = net.createServer(function(sock) {
    var JSONAllObject, getRemoveObj, newConnectionWarningUser, randomValue, replaceAll, sendDiePlayerAndWinnerToShow, sendFightToAnotherClient, sendFreeObj, sendMap, sendPosition, sendRemoveObj;
    replaceAll = function(text, busca, reemplaza) {
      while (text.toString().indexOf(busca) !== -1) {
        text = text.toString().replace(busca, reemplaza);
      }
      return text;
    };
    sendMap = function(num_map) {
      var a, i, len, ret, s, value, xx, yy;
      a = [];
      s = replaceAll(maps[0].getMapFields(), ", ", "");
      sys.puts(s);
      i = 0;
      len = s.length;
      while (i < len) {
        if (s[i] === "5") {
          a.push(i);
        }
        i++;
      }
      value = a[randomValue(0, a.length)];
      xx = parseInt(value / maps[num_map].getWidth());
      yy = parseInt(value % maps[num_map].getHeight());
      sys.log(xx + "   " + yy);
      positions[sock.remotePort].setPosX(5 * 64);
      positions[sock.remotePort].setPosY(5 * 64);
      ret = JSON.stringify({
        Action: "sendMap",
        Map: maps[num_map],
        X: positions[sock.remotePort].getPosX(),
        Y: positions[sock.remotePort].getPosY(),
        Id: sock.remotePort,
        Objects: JSONAllObject(),
        Users: positions
      });
      sock.write(ret);
    };
    sendPosition = function(client_id) {
      sock.write(JSON.stringify(positions[client_id]));
    };
    newConnectionWarningUser = function(client_id) {
      var i, len, prueba;
      sys.puts("Enviando nueva conexiÃ³n a clientes");
      len = sockets.length;
      prueba = positions[client_id];
      prueba["Action"] = "new";
      i = 0;
      while (i < len) {
        if (sockets[i] !== sock) {
          if (sockets[i]) {
            sockets[i].write(JSON.stringify(prueba));
          }
        }
        i++;
      }
    };
    sendFightToAnotherClient = function(emisor_id, receiver_id) {
      var i, len, ret, retOthers;
      retOthers = JSON.stringify({
        Action: "hide",
        Ids: [emisor_id, receiver_id]
      });
      positions[emisor_id].setRollDie(randomValue(1, 6));
      i = 0;
      len = sockets.length;
      while (i < len) {
        if (sockets[i].remotePort === receiver_id) {
          ret = {
            Action: "fight",
            Id_enemy: emisor_id
          };
          positions[receiver_id].setRollDie(randomValue(1, 6));
          sockets[i].write(JSON.stringify(ret));
        } else {
          if (sockets[i].remotePort !== emisor_id) {
            sockets[i].write(retOthers);
          }
        }
        i++;
      }
    };
    sendDiePlayerAndWinnerToShow = function(emisor_id, receiver_id) {
      var ret, winner;
      winner = -1;
      if (positions[emisor_id].getRollDie() > positions[receiver_id].getRollDie()) {
        winner = emisor_id;
      } else {
        if (positions[receiver_id].getRollDie() > positions[emisor_id].getRollDie()) {
          winner = receiver_id;
        }
      }
      ret = {
        Action: "finishBattle",
        ValueClient: positions[emisor_id].getRollDie(),
        ValueEnemy: positions[receiver_id].getRollDie(),
        Winner: winner
      };
      sock.write(JSON.stringify(ret));
    };
    randomValue = function(min, max) {
      var rand;
      rand = min + Math.floor(Math.random() * max);
      return rand;
    };
    JSONAllObject = function() {
      var ret;
      ret = [];
      ret.push({
        Id: "yellow",
        X: 32 * 10,
        Y: 32 * 1
      });
      return ret;
    };
    sendRemoveObj = function(id_obj) {
      var ret;
      ret = {
        Action: "remObj",
        Key: id_obj
      };
      return JSON.stringify(ret);
    };
    sendFreeObj = function(id_obj, id_client) {
      var ret;
      ret = {
        Action: "freeObj",
        Key: {
          Id: id_obj,
          X: positions[id_client].getPosX(),
          Y: positions[id_client].getPosY()
        }
      };
      return JSON.stringify(ret);
    };
    getRemoveObj = function(id_obj, id_client) {};
    sys.puts("Connected: " + sock.remoteAddress + ":" + sock.remotePort);
    positions[sock.remotePort] = new ObjectUser(sock.remotePort, 0, 0);
    sockets.push(sock);
    sendMap(0);
    newConnectionWarningUser(sock.remotePort);
    sock.on("data", function(data) {
      var Exception, d, i, idx, len, ret;
      sys.puts(JSON.stringify(positions));
      sys.puts("RECIBO: " + data);
      if (data !== "\n") {
        data = data.toString("utf8");
        d = data;
        try {
          d = JSON.parse(data);
        } catch (_error) {
          Exception = _error;
          sys.puts("Error parseo");
        }
        switch (d.Action) {
          case "move":
            positions[sock.remotePort].setPosition(d.Pos.X, d.Pos.Y);
            break;
          case "position":
            sendPosition(sock.remotePort);
            break;
          case "fight":
            sendFightToAnotherClient(sock.remotePort, d.Id_enemy);
            return;
          case "finishBattle":
            sendDiePlayerAndWinnerToShow(sock.remotePort, d.Id_enemy);
            return;
          case "exit":
            sys.puts("exit command received: " + sock.remoteAddress + ":" + sock.remotePort + "\n");
            ret = {
              Action: "exit",
              Id: sock.remotePort
            };
            sys.puts("ACTUAL: " + sockets.length);
            idx = sockets.indexOf(sock);
            sys.puts("Desconectado " + idx);
            sys.puts(sockets);
            if (idx !== -1) {
              console.log(positions[sock.remotePort]);
              delete positions[sock.remotePort];
              console.log(positions);
              sockets.splice(idx, 1);
              sys.puts("Borrado " + idx);
            }
            sys.puts("ACTUAL: " + sockets.length);
            console.log(data);
            len = sockets.length;
            i = 0;
            while (i < len) {
              if (sockets[i] !== sock) {
                if (sockets[i]) {
                  sockets[i].write(JSON.stringify(ret));
                }
              }
              i++;
            }
            return;
        }
        console.log(data);
        len = sockets.length;
        i = 0;
        while (i < len) {
          if (sockets[i] !== sock) {
            if (sockets[i]) {
              sockets[i].write(data);
            }
          }
          i++;
        }
      }
    });
    sock.on("end", function() {
      sys.puts("Disconnected end: " + sock.remotePort + "\n");
    });
    sock.on("error", function(exc) {
      sys.puts("Disconnected: " + sock.remotePort + "\n");
      sys.log("ignoring exception: " + exc);
    });
  });

  svraddr = "127.0.0.1";

  svrport = 8081;

  svr.listen(svrport, svraddr);

  sys.puts("Server Created at " + svraddr + ":" + svrport + "\n");

}).call(this);
